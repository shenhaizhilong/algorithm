package com.hui.algorithm;

/**
 * @author: shenhaizhilong
 * @date: 2018/12/2 22:05
 *
 *
 * 928. Minimize Malware Spread II
 * DescriptionHintsSubmissionsDiscussSolution
 * (This problem is the same as Minimize Malware Spread, with the differences bolded.)
 *
 * In a network of nodes, each node i is directly connected to another node j if and only if graph[i][j] = 1.
 *
 * Some nodes initial are initially infected by malware.  Whenever two nodes are directly connected and at least one of those two nodes is infected by malware, both nodes will be infected by malware.  This spread of malware will continue until no more nodes can be infected in this manner.
 *
 * Suppose M(initial) is the final number of nodes infected with malware in the entire network, after the spread of malware stops.
 *
 * We will remove one node from the initial list, completely removing it and any connections from this node to any other node.  Return the node that if removed, would minimize M(initial).  If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.
 *
 *
 *
 * Example 1:
 *
 * Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
 * Output: 0
 * Example 2:
 *
 * Input: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]
 * Output: 1
 * Example 3:
 *
 * Input: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]
 * Output: 1
 *
 *
 * Note:
 *
 * 1 < graph.length = graph[0].length <= 300
 * 0 <= graph[i][j] == graph[j][i] <= 1
 * graph[i][i] = 1
 * 1 <= initial.length < graph.length
 * 0 <= initial[i] < graph.length
 */
public class MinimizeMalwareSpread {


    public int minMalwareSpread(int[][] graph, int[] initial) {

        int N = graph.length;

        UnionFindII unionFindII = new UnionFindII(N);

        // up triangle
        for (int i = 0; i < N; i++) {
            for (int j = i +1; j < N; j++) {
                if(graph[i][j] == 1)
                {
                    unionFindII.union(i,j);
                }
            }
        }


        // we only can remove one node from a set, if initial[i] == initial[j], where i !=j,  remove i or j make no sense.
        // since it can't decrease the impacted nodes
        int[] count = new int[N];

        int min = Integer.MAX_VALUE;
        for(int i: initial)
        {
            count[unionFindII.find(i)]++;
            min = Math.min(min, i);
        }

        int[] ans = {-1,-1};//  index   and  size

        for(int node: initial)
        {
            int parent = unionFindII.find(node);
            if(count[parent] == 1)  // just only one node in one set
            {
                int size = unionFindII.getSize(node);
                if(ans[1] < size)
                {
                    ans[1] = size;
                    ans[0] = node;
                }else if(ans[1] == size)
                {
                    ans[0] = Math.min(ans[0], node);
                }
            }
        }
        // if no just only one node in one set, return min(initial)
        return ans[0] == -1? min: ans[0];

    }
}
